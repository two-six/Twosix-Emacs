#+TITLE: TwoSix Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ../.emacs.d/init.el

* Package System
** General Stuff

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

** Use-Package

#+begin_src emacs-lisp
  ;; Initialize use-package on non-Linux Platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* UI Configuration
** Make Emacs look more minimalistic

#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; Removes startup message

  (scroll-bar-mode -1)             ; Disable visible scrollbar
  (tool-bar-mode -1)               ; Disable the toolbar
  (tooltip-mode -1)                ; Disable tooltips
  (set-fringe-mode 10)             ; Give some breathing space
  (menu-bar-mode -1)               ; Disable the menu bar

  (setq visible-bell t)            ;  Set up visible bell

  (column-number-mode)
  (global-display-line-numbers-mode t)

#+end_src

** Font Configuration

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "IBM Plex Mono" :height 120)

#+end_src

** Disable line numbers for some modes

#+begin_src emacs-lisp

  (dolist (mode '(term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Rainbow delimeters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Which-Key

#+begin_src emacs-lisp

  (use-package which-key                  ; After 1 second pops up a help window
    :init (setq which-key-idle-delay 0.3)
    :config (which-key-mode))

#+end_src

** Doom Modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Doom Themes(disabled by default)

#+begin_src emacs-lisp
;;  (use-package doom-themes
;;    :config
    ;; Global Settings
;;    (setq doom-themes-enable-bold t
;;          doom-themes-enable-italic t)
;;    (load-theme 'doom-solarized-light t)
    ;; Enable flashing mode-line on errors
;;    (doom-themes-visual-bell-config))
#+end_src

** Distraction-Free Themes
*** Commentary Theme (Default)
[[https://github.com/pzel/commentary-theme][Github]]
#+begin_src emacs-lisp

  (use-package commentary-theme
    :ensure t)
  (load-theme 'commentary t)

#+end_src

*** Sorcery Theme
[[https://github.com/mtreca/emacs-theme-sorcery][Github]]
#+begin_src emacs-lisp

(use-package sorcery-theme
    :ensure t)

#+end_src

** Helpful

#+begin_src emacs-lisp

    (use-package helpful
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))

#+end_src

** Dashboard

#+begin_src emacs-lisp

    (use-package dashboard
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))

#+end_src

** Visual-Fill

#+begin_src emacs-lisp

    (defun twosix/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1)
      (display-line-numbers-mode 0))

    (use-package visual-fill
      :defer t
      :hook (org-mode . twosix/org-mode-visual-fill))

#+end_src

** Writeroom-Mode

#+begin_src emacs-lisp

    (use-package writeroom-mode)

#+end_src

** Smooth-Scrolling

#+begin_src emacs-lisp

    (use-package smooth-scrolling
      :config (smooth-scrolling-mode 1))

#+end_src

** Page-Break-Lines

#+begin_src emacs-lisp

    (use-package page-break-lines)

#+end_src

** End Message
#+begin_src emacs-lisp 
    (setq confirm-kill-emacs #'y-or-n-p)
#+end_src
* Ivy && Counsel
** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

#+end_src

** Ivy-Rich

#+begin_src emacs-lisp

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

** Counsel

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

#+end_src

* Evil && God Mode
** Evil

#+begin_src emacs-lisp

  (use-package evil
    :init (setq evil-want-keybinding nil)
    :config
    (setq evil-want-integration nil)
    (evil-mode 1)
    (evil-define-key 'normal global-map "," 'evil-execute-in-god-state)
    (evil-define-key 'god global-map [escape] 'evil-god-state-bail)
    (evil-define-key 'god global-map "w" 'evil-window-map)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

#+end_src

** God

#+begin_src emacs-lisp

  (use-package god-mode
    :config
    (which-key-enable-god-mode-support))

#+end_src

** Evil + God

#+begin_src emacs-lisp

  (use-package evil-god-state)

#+end_src

** Evil-Commentary

#+begin_src emacs-lisp

    (use-package evil-commentary
      :config (evil-commentary-mode))

#+end_src

** Evil-Collection

#+begin_src emacs-lisp

    (use-package evil-collection
      :after magit
      :config (evil-collection-init))

#+end_src

* Bindings
** Globals
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Key-Chord

#+begin_src emacs-lisp

  (use-package key-chord
    :init (key-chord-mode 1)
    ;; :config (key-chord-define-global ".."  "<>\C-SPC")
    :config
    (key-chord-define-global "fp" 'keyboard-escape-quit)
    (key-chord-define-global "kp" 'evil-execute-in-god-state))

#+end_src

** General

#+begin_src emacs-lisp

    (use-package general
      :config
      (general-create-definer twosix/leader-keys
        :keymaps '(normal emacs treemacs Treemacs) 
        :prefix "SPC"
        :global-prefix "C-SPC")

      (twosix/leader-keys
       "t" '(:ignore t :which-key "Themes")
       "tt" '(counsel-load-theme :which-key "Choose Theme")
       "w" '(evil-window-map :which-key "Evil Window")
       "d" '(:ignore t :which-key "Doom")
       "de" '(evil-window-enlargen :which-key "Window Enlargen")
       "s" '(hydra-text-scale/body :which-key "Scale")
       "p" '(projectile-command-map :which-key "Projectile")
       "o" '(:ignore t :which-key "Open")
       "ow" '(writeroom-mode :which-key "Writeroom")
       ;; "op" '(treemacs :which-key "Treemacs")
       "b" '(counsel-switch-buffer :which-key "Switch Buffers")
       "g" '(magit-status :which-key "Magit Status")
       ";" '(counsel-M-x :which-key "M-x")))

    (general-define-key
     "M-x" 'counsel-M-x
     "C-x B" 'counsel-switch-buffer
     "C-s" 'counsel-grep-or-swiper
     "C-x t t" 'counsel-load-theme)

#+end_src

** Hydra

#+begin_src emacs-lisp

    (use-package hydra)

    (defhydra hydra-text-scale (:timeout 4)
      "Scale Text"
      ("j" text-scale-increase "in")
      ("k" text-scale-decrease "out")
      ("f" nil "finished" :exit t))

#+end_src

** Doom/Enlargen-Window

#+begin_src emacs-lisp

    (defun evil-window-enlargen (&optional arg)
      "Enlargen the current window (i.e. shrinks others) so you can focus on it.
    Use `winner-undo' to undo this. Alternatively, use
    `doom/window-maximize-buffer'."
      (interactive "P")
      (let* ((window (selected-window))
             (dedicated-p (window-dedicated-p window))
             (preserved-p (window-parameter window 'window-preserved-size))
             (ignore-window-parameters t)
             (window-resize-pixelwise nil)
             (frame-resize-pixelwise nil))
        (unwind-protect
            (progn
              (when dedicated-p
                (set-window-dedicated-p window nil))
              (when preserved-p
                (set-window-parameter window 'window-preserved-size nil))
              (maximize-window window))
          (set-window-dedicated-p window dedicated-p)
          (when preserved-p
            (set-window-parameter window 'window-preserved-size preserved-p)))))

  (setq org-fontify-whole-heading-line t) 

#+end_src

* Working With Projects
** Projectile

#+begin_src emacs-lisp

    (use-package projectile
      :diminish projectile-mode
      :config (projectile-mode)
      ;; :bind-keymap ("C-c p" . projectile-command-map)
      :init
      ;; (when (file-directory-p "~/Documents/code")
      ;;   (setq projectile-project-search-path '("~/Documents/code")))
      (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Counsel-Projectile

#+begin_src emacs-lisp

    (use-package counsel-projectile
      :config (counsel-projectile-mode))

#+end_src

** Magit

#+begin_src emacs-lisp

    (use-package magit
      :commands (magit-status magit-get-current-branch)
      ;; :custom
      ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
      )

#+end_src

** Forge

#+begin_src emacs-lisp

  (use-package forge)

#+end_src

** LSP-Mode

#+begin_src emacs-lisp

(use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
        (setq lsp-keymap-prefix "C-c l")
    :config
        (lsp-enable-which-key-integration t))

#+end_src

** Languages
*** Python

* Org-Mode
** Org

#+begin_src emacs-lisp

    (defun twosix/org-mode-setup ()
      (org-indent-mode)
      (visual-line-mode 1))

    (use-package org
      :hook (org-mode . twosix/org-mode-setup)
      :config
      (setq org-ellipsis " ▾")

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)

      (setq org-agenda-files
            '("~/Documents/Orgzly/tasks.org"
              "~/Documents/Orgzly/Birthdays.org"))

      (setq org-refile-targets
            '(("Archive.org" :maxlevel . 1)
              ("tasks.org" :maxlevel . 1)
              ("Shopping.org" :maxlevel . 1)
              ("Shopping-Archive.org" :maxlevel . 1)))

      (advice-add 'org-refile :after 'org-save-all-org-buffers))

#+end_src

** Auto-Templates

#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** Auto-Tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun twosix/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
          (expand-file-name "~/.twosix-emacs/config.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'twosix/org-babel-tangle-config)))
#+end_src

** Dots in Lists

#+begin_src emacs-lisp

    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                                (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+end_src

** No Lines After Headers in Which Are Code Blocks

#+begin_src emacs-lisp

    (setq org-hide-emphasis-markers t)

#+end_src

** Org-Bullets

#+begin_src emacs-lisp

    (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+end_src

** Code Syntax Highlighting in Exported Documents
*** HTMLIZE

#+begin_src emacs-lisp

(use-package htmlize)

#+end_src

*** Minted

#+begin_src emacs-lisp

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src

* Ledger
** Ledger-mode

#+begin_src emacs-lisp

  (defun twosix/ledger-mode-setup ()
    (setq-local tab-always-indent 'complete)
                (setq-local completion-cycle-threshold t)
                (setq-local ledger-complete-in-steps t))

    (use-package ledger-mode
    :hook (ledger-mode . twosix/ledger-mode-setup))



#+end_src
